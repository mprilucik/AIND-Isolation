
def custom_score(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    D11, D12 = [0,0], [game.width, game.height]
    D21, D22 = [0,game.height], [game.width, 0]
    
    y, x = game.get_player_location(player)
    L = [y,x]
    D1 = norm(cross(subtract(D12,D11), subtract(D11,L)))/norm(numpy.subtract(D12,D11))
    D2 = norm(cross(subtract(D22,D21), subtract(D21,L)))/norm(numpy.subtract(D22, D21))
    return 100 - max(D1, D2)    


def custom_score_2(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    D11, D12 = [0,0], [game.width, game.height]
    D21, D22 = [0,game.height], [game.width, 0]
    
    y, x = game.get_player_location(player)
    L = [y,x]
    D1 = norm(cross(subtract(D12,D11), subtract(D11,L)))/norm(numpy.subtract(D12,D11))
    D2 = norm(cross(subtract(D22,D21), subtract(D21,L)))/norm(numpy.subtract(D22, D21))
    return min(D1, D2)    


def custom_score_3(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    D11, D12 = [0,0], [game.width, game.height]
    D21, D22 = [0,game.height], [game.width, 0]
    
    y, x = game.get_player_location(player)
    L = [y,x]
    D1 = norm(cross(subtract(D12,D11), subtract(D11,L)))/norm(numpy.subtract(D12,D11))
    D2 = norm(cross(subtract(D22,D21), subtract(D21,L)))/norm(numpy.subtract(D22, D21))
    return max(D1, D2)    

                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open      8  |   2     8  |   2     7  |   3     9  |   1  
    3      MM_Center    10  |   0    10  |   0    10  |   0    10  |   0  
    4     MM_Improved    9  |   1     8  |   2     9  |   1     9  |   1  
    5       AB_Open      6  |   4     4  |   6     3  |   7     5  |   5  
    6      AB_Center     5  |   5     7  |   3     5  |   5     2  |   8  
    7     AB_Improved    5  |   5     5  |   5     3  |   7     4  |   6  
--------------------------------------------------------------------------
           Win Rate:      75.7%        74.3%        67.1%        70.0%   
===========================================================================================================
		   

def custom_score(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    D11, D12 = [0,0], [game.width, game.height]
    D21, D22 = [0,game.height], [game.width, 0]
    
    y, x = game.get_player_location(player)
    L = [y,x]
    D1 = norm(cross(subtract(D12,D11), subtract(D11,L)))/norm(numpy.subtract(D12,D11))
    D2 = norm(cross(subtract(D22,D21), subtract(D21,L)))/norm(numpy.subtract(D22, D21))
    return 100 - max(D1, D2)    


def custom_score_2(game, player):
    D11, D12 = [0,0], [game.width, game.height]
    D21, D22 = [0,game.height], [game.width, 0]
    
    y, x = game.get_player_location(player)
    L = [y,x]
    D1 = norm(cross(subtract(D12,D11), subtract(D11,L)))/norm(numpy.subtract(D12,D11))
    D2 = norm(cross(subtract(D22,D21), subtract(D21,L)))/norm(numpy.subtract(D22, D21))
    
    return float(len(game.get_legal_moves(player))) - max(D1, D2)    


def custom_score_3(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    D11, D12 = [0,0], [game.width, game.height]
    D21, D22 = [0,game.height], [game.width, 0]
    
    y, x = game.get_player_location(player)
    L = [y,x]
    D1 = norm(cross(subtract(D12,D11), subtract(D11,L)))/norm(numpy.subtract(D12,D11))
    D2 = norm(cross(subtract(D22,D21), subtract(D21,L)))/norm(numpy.subtract(D22, D21))
    return 100 - min(D1, D2)   		   
		   
		   
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open     10  |   0    10  |   0    10  |   0     8  |   2  
    3      MM_Center    10  |   0    10  |   0    10  |   0    10  |   0  
    4     MM_Improved    9  |   1     5  |   5     5  |   5     8  |   2  
    5       AB_Open      4  |   6     4  |   6     4  |   6     4  |   6  
    6      AB_Center     7  |   3     5  |   5     5  |   5     5  |   5  
    7     AB_Improved    4  |   6     6  |   4     2  |   8     4  |   6  
--------------------------------------------------------------------------
           Win Rate:      77.1%        71.4%        65.7%        70.0%  
		   
=========================================================================================================

def custom_score(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    D11, D12 = [0,0], [game.width, game.height]
    D21, D22 = [0,game.height], [game.width, 0]
    
    y, x = game.get_player_location(player)
    L = [y,x]
    D1 = norm(cross(subtract(D12,D11), subtract(D11,L)))/norm(numpy.subtract(D12,D11))
    D2 = norm(cross(subtract(D22,D21), subtract(D21,L)))/norm(numpy.subtract(D22, D21))
    return 100 - max(D1, D2)    


def custom_score_2(game, player):

    # TODO: finish this function!
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    opp = game.get_opponent(player)
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    distance = float(norm(subtract(my_loc,opp_loc)))
    return distance


def custom_score_3(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")

    own_moves = len(game.get_legal_moves(player))
    opp = game.get_opponent(player)
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    distance = float(12 - norm(subtract(my_loc,opp_loc)))
    return distance

                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       9  |   1     9  |   1     8  |   2    10  |   0  
    2       MM_Open      8  |   2     7  |   3     7  |   3     8  |   2  
    3      MM_Center    10  |   0    10  |   0    10  |   0    10  |   0  
    4     MM_Improved    8  |   2     6  |   4     9  |   1     6  |   4  
    5       AB_Open      4  |   6     3  |   7     5  |   5     6  |   4  
    6      AB_Center     6  |   4     5  |   5     6  |   4     4  |   6  
    7     AB_Improved    6  |   4     6  |   4     4  |   6     5  |   5  
--------------------------------------------------------------------------
           Win Rate:      72.9%        65.7%        70.0%        70.0%  
=================================================================================================
def custom_score(game, player):
    # TODO: finish this function!
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    distance = float(12 - norm(subtract(my_loc,opp_loc)))    
    
    return n_moves + distance


def custom_score_2(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    distance = float(12 - norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    return n_moves + center_distance + distance


def custom_score_3(game, player):

    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    distance = float(12 - norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    return 19 * n_moves + 17 * center_distance + 13 * distance


                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       9  |   1    10  |   0    10  |   0    10  |   0  
    2       MM_Open      9  |   1     9  |   1    10  |   0    10  |   0  
    3      MM_Center    10  |   0    10  |   0    10  |   0    10  |   0  
    4     MM_Improved    8  |   2     8  |   2     7  |   3    10  |   0  
    5       AB_Open      5  |   5     8  |   2     7  |   3     5  |   5  
    6      AB_Center     6  |   4     5  |   5     5  |   5     5  |   5  
    7     AB_Improved    6  |   4     6  |   4     5  |   5     5  |   5  
--------------------------------------------------------------------------
           Win Rate:      75.7%        80.0%        77.1%        78.6%    
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0     9  |   1  
    2       MM_Open     10  |   0     7  |   3     8  |   2     9  |   1  
    3      MM_Center     9  |   1     9  |   1    10  |   0    10  |   0  
    4     MM_Improved    6  |   4     9  |   1     9  |   1     7  |   3  
    5       AB_Open      5  |   5     2  |   8     5  |   5     8  |   2  
    6      AB_Center     6  |   4     3  |   7     6  |   4     7  |   3  
    7     AB_Improved    7  |   3     6  |   4     3  |   7     3  |   7  
--------------------------------------------------------------------------
           Win Rate:      75.7%        65.7%        72.9%        75.7%    
======================================================================================================

def custom_score(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    distance = float(12 - norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    return 19 * n_moves + 17 * center_distance + 13 * distance

def custom_score_2(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    distance = float(12 - norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    return n_moves + center_distance + distance


def custom_score_3(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(12 - norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
#    print('space_left', space_left)
    return n_moves + (space_left * center_distance) + ((1-space_left) * players_distance)


                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open      8  |   2     8  |   2     8  |   2    10  |   0  
    3      MM_Center    10  |   0    10  |   0    10  |   0    10  |   0  
    4     MM_Improved    8  |   2     8  |   2     8  |   2     8  |   2  
    5       AB_Open      4  |   6     3  |   7     5  |   5     5  |   5  
    6      AB_Center     7  |   3     4  |   6     6  |   4     5  |   5  
    7     AB_Improved    5  |   5     5  |   5     4  |   6     4  |   6  
--------------------------------------------------------------------------
           Win Rate:      74.3%        68.6%        72.9%        74.3%    
==================================================================================================================

                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open      8  |   2    10  |   0     8  |   2     9  |   1  
    3      MM_Center    10  |   0    10  |   0    10  |   0    10  |   0  
    4     MM_Improved    9  |   1     7  |   3    10  |   0     9  |   1  
    5       AB_Open      8  |   2     5  |   5     6  |   4     4  |   6  
    6      AB_Center     7  |   3     4  |   6     5  |   5     3  |   7  
    7     AB_Improved    6  |   4     5  |   5     5  |   5     8  |   2  
--------------------------------------------------------------------------
           Win Rate:      82.9%        72.9%        77.1%        75.7%    
		   
		   
def custom_score_3(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(12 - norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
#    print('space_left', space_left)
    if space_left > 90:
        return n_moves + center_distance
    else:
        return n_moves + players_distance
#    return n_moves + (space_left * center_distance) + ((1-space_left) * players_distance)

def custom_score_2(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
#    print('space_left', space_left)
    if space_left > 90:
        return n_moves + center_distance
    else:
        return n_moves + players_distance


def custom_score(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(12 - norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
    return n_moves + (space_left * center_distance) + ((1-space_left) * players_distance)


========================================================================================================


                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open      8  |   2     9  |   1     7  |   3     9  |   1  
    3      MM_Center    10  |   0    10  |   0     8  |   2    10  |   0  
    4     MM_Improved    8  |   2    10  |   0     7  |   3     8  |   2  
    5       AB_Open      6  |   4     4  |   6     5  |   5     8  |   2  
    6      AB_Center     4  |   6     7  |   3     3  |   7     6  |   4  
    7     AB_Improved    5  |   5     5  |   5     6  |   4     5  |   5  
--------------------------------------------------------------------------
           Win Rate:      72.9%        78.6%        65.7%        80.0%    
		   
def custom_score(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(12 - norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
#    print('space_left', space_left)
#    return n_moves + (space_left * center_distance) + ((1-space_left) * players_distance)
    if space_left > 95:
        return n_moves + center_distance
    else:
        return n_moves + players_distance




def custom_score_2(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
#    print('space_left', space_left)
    if space_left > 90:
        return n_moves + center_distance
    else:
        return n_moves + players_distance


def custom_score_3(game, player):

    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
#    print('space_left', space_left)
    return n_moves + (space_left * center_distance) + ((1-space_left) * players_distance)
====================================================================================================
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0     9  |   1  
    2       MM_Open      8  |   2     9  |   1     9  |   1     9  |   1  
    3      MM_Center     9  |   1    10  |   0    10  |   0    10  |   0  
    4     MM_Improved    8  |   2     7  |   3     7  |   3     7  |   3  
    5       AB_Open      6  |   4     6  |   4     5  |   5     3  |   7  
    6      AB_Center     5  |   5     2  |   8     5  |   5     5  |   5  
    7     AB_Improved    6  |   4     4  |   6     6  |   4     5  |   5  
--------------------------------------------------------------------------
           Win Rate:      74.3%        68.6%        74.3%        68.6%    
		   
def custom_score(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(12 - norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
#    print('space_left', space_left)
#    return n_moves + (space_left * center_distance) + ((1-space_left) * players_distance)
    if space_left > 95:
        return n_moves + center_distance
    else:
        return n_moves + players_distance




def custom_score_2(game, player):
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
#    print('space_left', space_left)
    if space_left > 95:
        return n_moves + center_distance
    else:
        return n_moves + players_distance


def custom_score_3(game, player):

    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
#    print('space_left', space_left)
    return n_moves + (space_left * center_distance) + ((1-space_left) * players_distance)
	
==========================================================================================================

                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       9  |   1    10  |   0    10  |   0     8  |   2  
    2       MM_Open      9  |   1    10  |   0     9  |   1     9  |   1  
    3      MM_Center    10  |   0    10  |   0    10  |   0     9  |   1  
    4     MM_Improved   10  |   0     8  |   2     7  |   3     7  |   3  
    5       AB_Open      4  |   6     4  |   6     3  |   7     5  |   5  
    6      AB_Center     6  |   4     4  |   6     6  |   4     7  |   3  
    7     AB_Improved    4  |   6     4  |   6     8  |   2     8  |   2  
--------------------------------------------------------------------------
           Win Rate:      74.3%        71.4%        75.7%        75.7%    
		   
		   
def custom_score(game, player):

    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
#    print('space_left', space_left)
#    return n_moves + (space_left * center_distance) + ((1-space_left) * players_distance)
    if space_left > 95:
        return center_distance
    else:
        return n_moves + players_distance




def custom_score_2(game, player):

    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
#    print('space_left', space_left)
    if space_left > 92:
        return center_distance
    else:
        return n_moves + players_distance


def custom_score_3(game, player):

    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
#    print('space_left', space_left)
    return n_moves + (space_left * center_distance) + ((1-space_left) * players_distance)
	
=======================================================================================================================================
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open     10  |   0     8  |   2     8  |   2     8  |   2  
    3      MM_Center     9  |   1    10  |   0    10  |   0    10  |   0  
    4     MM_Improved    9  |   1     8  |   2     7  |   3     8  |   2  
    5       AB_Open      5  |   5     5  |   5     6  |   4     6  |   4  
    6      AB_Center     5  |   5     8  |   2     7  |   3     2  |   8  
    7     AB_Improved    6  |   4     5  |   5     3  |   7     4  |   6  
--------------------------------------------------------------------------
           Win Rate:      77.1%        77.1%        72.9%        68.6%    
		   
def custom_score(game, player):
    """Calculate the heuristic value of a game state from the point of view
    of the given player.

    Note: this function should be called from within a Player instance as
    `self.score()` -- you should not need to call this function directly.

    Parameters
    ----------
    game : `isolation.Board`
        An instance of `isolation.Board` encoding the current state of the
        game (e.g., player locations and blocked cells).

    player : object
        A player instance in the current game (i.e., an object corresponding to
        one of the player objects `game.__player_1__` or `game.__player_2__`.)

    Returns
    -------
    float
        The heuristic value of the current game state to the specified player.
    """
    # TODO: finish this function!
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    # how far are the players from each other, the further the bigger number
    players_distance = float(norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    # how far are the players from the center of board
    # the closer the bigger value - substracted from constant 6 as max distance from center
    # TODO - the max distance could be rather calculated from board size - width, height
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    # percengate of space left
    space_left = blank/space 
    
    # during the begining of the game  4 ply each try to stay at the center of the board
    if space_left > 92:
        return center_distance
    else:
        return n_moves + players_distance


def custom_score_2(game, player):
    """Calculate the heuristic value of a game state from the point of view
    of the given player.

    This should be the best heuristic function for your project submission.

    Note: this function should be called from within a Player instance as
    `self.score()` -- you should not need to call this function directly.

    Parameters
    ----------
    game : `isolation.Board`
        An instance of `isolation.Board` encoding the current state of the
        game (e.g., player locations and blocked cells).

    player : object
        A player instance in the current game (i.e., an object corresponding to
        one of the player objects `game.__player_1__` or `game.__player_2__`.)

    Returns
    -------
    float
        The heuristic value of the current game state to the specified player.
    """
    # TODO: finish this function!
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")
    
    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
    return n_moves + (space_left * center_distance) + ((1-space_left) * players_distance)


def custom_score_3(game, player):
    """Calculate the heuristic value of a game state from the point of view
    of the given player.

    Note: this function should be called from within a Player instance as
    `self.score()` -- you should not need to call this function directly.

    Parameters
    ----------
    game : `isolation.Board`
        An instance of `isolation.Board` encoding the current state of the
        game (e.g., player locations and blocked cells).

    player : object
        A player instance in the current game (i.e., an object corresponding to
        one of the player objects `game.__player_1__` or `game.__player_2__`.)

    Returns
    -------
    float
        The heuristic value of the current game state to the specified player.
    """
    # TODO: finish this function!
    if game.is_loser(player):
        return float("-inf")

    if game.is_winner(player):
        return float("inf")

    opp = game.get_opponent(player)
    
    own_moves = len(game.get_legal_moves(player))
    opp_moves = len(game.get_legal_moves(opp))
    n_moves =  float(own_moves - opp_moves)  
    
    opp_loc = game.get_player_location(opp)
    my_loc = game.get_player_location(player)
    players_distance = float(norm(subtract(my_loc,opp_loc)))    
    
    center_loc = game.width / 2., game.height / 2.
    center_distance = float(6 - norm(subtract(my_loc,center_loc)))        
    
    blank = float(len(game.get_blank_spaces()))
    space = float(game.width * game.height)
    space_left = blank/space 
    return (space_left * center_distance) + ((1-space_left) * (players_distance + n_moves ))

                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open     10  |   0    10  |   0     9  |   1     9  |   1  
    3      MM_Center     9  |   1    10  |   0    10  |   0    10  |   0  
    4     MM_Improved    9  |   1     9  |   1     7  |   3     9  |   1  
    5       AB_Open      6  |   4     5  |   5     4  |   6     5  |   5  
    6      AB_Center     6  |   4     7  |   3     6  |   4     5  |   5  
    7     AB_Improved    3  |   7     5  |   5     5  |   5     5  |   5  
--------------------------------------------------------------------------
           Win Rate:      75.7%        80.0%        72.9%        75.7%    
		   
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open      7  |   3     9  |   1    10  |   0     7  |   3  
    3      MM_Center    10  |   0    10  |   0    10  |   0    10  |   0  
    4     MM_Improved   10  |   0     9  |   1     8  |   2     9  |   1  
    5       AB_Open      4  |   6     5  |   5     4  |   6     5  |   5  
    6      AB_Center     3  |   7     4  |   6     6  |   4     4  |   6  
    7     AB_Improved    6  |   4     6  |   4     5  |   5     4  |   6  
--------------------------------------------------------------------------
           Win Rate:      71.4%        75.7%        75.7%        70.0%    
		   
		   
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open      7  |   3     9  |   1    10  |   0     7  |   3  
    3      MM_Center    10  |   0    10  |   0    10  |   0    10  |   0  
    4     MM_Improved   10  |   0     9  |   1     8  |   2     9  |   1  
    5       AB_Open      4  |   6     5  |   5     4  |   6     5  |   5  
    6      AB_Center     3  |   7     4  |   6     6  |   4     4  |   6  
    7     AB_Improved    6  |   4     6  |   4     5  |   5     4  |   6  
--------------------------------------------------------------------------
           Win Rate:      71.4%        75.7%        75.7%        70.0%    
		   
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open      9  |   1     7  |   3     7  |   3    10  |   0  
    3      MM_Center    10  |   0    10  |   0    10  |   0    10  |   0  
    4     MM_Improved    8  |   2     8  |   2    10  |   0     9  |   1  
    5       AB_Open      5  |   5     4  |   6     4  |   6     5  |   5  
    6      AB_Center     8  |   2     4  |   6     5  |   5     7  |   3  
    7     AB_Improved    5  |   5     6  |   4     4  |   6     4  |   6  
--------------------------------------------------------------------------
           Win Rate:      78.6%        70.0%        71.4%        78.6%    

                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0     9  |   1    10  |   0  
    2       MM_Open     10  |   0     8  |   2    10  |   0    10  |   0  
    3      MM_Center    10  |   0    10  |   0    10  |   0     9  |   1  
    4     MM_Improved    9  |   1    10  |   0     7  |   3     9  |   1  
    5       AB_Open      5  |   5     6  |   4     4  |   6     4  |   6  
    6      AB_Center     5  |   5     3  |   7     6  |   4     6  |   4  
    7     AB_Improved    5  |   5     5  |   5     7  |   3     2  |   8  
--------------------------------------------------------------------------
           Win Rate:      77.1%        74.3%        75.7%        71.4%    

		   
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open      9  |   1     9  |   1     9  |   1     8  |   2  
    3      MM_Center    10  |   0     9  |   1     9  |   1    10  |   0  
    4     MM_Improved    9  |   1    10  |   0    10  |   0     8  |   2  
    5       AB_Open      5  |   5     4  |   6     4  |   6     6  |   4  
    6      AB_Center     5  |   5     7  |   3     6  |   4     8  |   2  
    7     AB_Improved    5  |   5     2  |   8     5  |   5     4  |   6  
--------------------------------------------------------------------------
           Win Rate:      75.7%        72.9%        75.7%        77.1%    
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open      8  |   2    10  |   0     8  |   2    10  |   0  
    3      MM_Center    10  |   0    10  |   0    10  |   0     8  |   2  
    4     MM_Improved   10  |   0     9  |   1     9  |   1     8  |   2  
    5       AB_Open      5  |   5     6  |   4     5  |   5     2  |   8  
    6      AB_Center     8  |   2     7  |   3     6  |   4     7  |   3  
    7     AB_Improved    4  |   6     6  |   4     5  |   5     5  |   5  
--------------------------------------------------------------------------
           Win Rate:      78.6%        82.9%        75.7%        71.4%    
		   
 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       8  |   2     9  |   1    10  |   0    10  |   0  
    2       MM_Open      9  |   1     7  |   3     8  |   2     8  |   2  
    3      MM_Center    10  |   0    10  |   0     9  |   1    10  |   0  
    4     MM_Improved    9  |   1    10  |   0     8  |   2     8  |   2  
    5       AB_Open      5  |   5     5  |   5     4  |   6     4  |   6  
    6      AB_Center     6  |   4     5  |   5     6  |   4     4  |   6  
    7     AB_Improved    4  |   6     4  |   6     2  |   8     5  |   5  
--------------------------------------------------------------------------
           Win Rate:      72.9%        71.4%        67.1%        70.0%   

                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0    10  |   0    10  |   0    10  |   0  
    2       MM_Open     10  |   0     9  |   1     8  |   2     8  |   2  
    3      MM_Center    10  |   0     9  |   1    10  |   0    10  |   0  
    4     MM_Improved    9  |   1     8  |   2     8  |   2     9  |   1  
    5       AB_Open      7  |   3     5  |   5     4  |   6     4  |   6  
    6      AB_Center     5  |   5     5  |   5     5  |   5     4  |   6  
    7     AB_Improved    6  |   4     5  |   5     4  |   6     5  |   5  
--------------------------------------------------------------------------
           Win Rate:      81.4%        72.9%        70.0%        71.4%    
		   
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       5  |   5     6  |   4     7  |   3     7  |   3  
    2       MM_Open      8  |   2     5  |   5     8  |   2     8  |   2  
    3      MM_Center     9  |   1    10  |   0     9  |   1    10  |   0  
    4     MM_Improved    9  |   1     6  |   4     7  |   3     7  |   3  
    5       AB_Open      6  |   4     7  |   3     3  |   7     4  |   6  
    6      AB_Center  
   8  |   2     5  |   5     6  |   4     5  |   5  
    7     AB_Improved    4  |   6     4  |   6     7  |   3     6  |   4  
--------------------------------------------------------------------------
           Win Rate:      70.0%        61.4%        67.1%        67.1%    
		   
 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       9  |   1     6  |   4     4  |   6     6  |   4  
    2       MM_Open      8  |   2     4  |   6     6  |   4     6  |   4  
    3      MM_Center     8  |   2     7  |   3     6  |   4     8  |   2  
    4     MM_Improved   10  |   0     8  |   2     7  |   3     5  |   5  
    5       AB_Open      4  |   6     4  |   6     5  |   5     5  |   5  
    6      AB_Center     5  |   5     8  |   2     7  |   3     6  |   4  
    7     AB_Improved    5  |   5     5  |   5     3  |   7     2  |   8  
--------------------------------------------------------------------------
           Win Rate:      70.0%        60.0%        54.3%        54.3%    

		   
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       8  |   2     8  |   2     9  |   1    10  |   0  
    2       MM_Open      9  |   1     9  |   1     6  |   4     9  |   1  
    3      MM_Center     9  |   1     7  |   3     8  |   2     8  |   2  
    4     MM_Improved    5  |   5     5  |   5     4  |   6     4  |   6  
    5       AB_Open      5  |   5     3  |   7     5  |   5     4  |   6  
    6      AB_Center     5  |   5     4  |   6     4  |   6     5  |   5  
    7     AB_Improved    5  |   5     5  |   5     5  |   5     4  |   6  
--------------------------------------------------------------------------
           Win Rate:      65.7%        58.6%        58.6%        62.9%    
		   
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0     9  |   1     8  |   2     8  |   2  
    2       MM_Open      9  |   1     6  |   4     9  |   1     8  |   2  
    3      MM_Center     9  |   1     6  |   4     9  |   1    10  |   0  
    4     MM_Improved    8  |   2     8  |   2     8  |   2     8  |   2  
    5       AB_Open      5  |   5     3  |   7     5  |   5     5  |   5  
    6      AB_Center     6  |   4     4  |   6     8  |   2     6  |   4  
    7     AB_Improved    5  |   5     3  |   7     4  |   6     3  |   7  
--------------------------------------------------------------------------
           Win Rate:      74.3%        55.7%        72.9%        68.6%    
		   
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       9  |   1    10  |   0    10  |   0     9  |   1  
    2       MM_Open      8  |   2     5  |   5     7  |   3     7  |   3  
    3      MM_Center     7  |   3     9  |   1     8  |   2     8  |   2  
    4     MM_Improved    8  |   2     8  |   2     6  |   4     6  |   4  
    5       AB_Open      4  |   6     3  |   7     6  |   4     5  |   5  
    6      AB_Center     6  |   4     7  |   3     5  |   5     8  |   2  
    7     AB_Improved    5  |   5     4  |   6     5  |   5     3  |   7  
--------------------------------------------------------------------------
           Win Rate:      67.1%        65.7%        67.1%        65.7%    
		   
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random      10  |   0     9  |   1     9  |   1     8  |   2  
    2       MM_Open      9  |   1     7  |   3     7  |   3     7  |   3  
    3      MM_Center     7  |   3     9  |   1     9  |   1     9  |   1  
    4     MM_Improved    3  |   7     6  |   4     3  |   7     2  |   8  
    5       AB_Open      6  |   4     6  |   4     5  |   5     6  |   4  
    6      AB_Center     4  |   6     6  |   4     6  |   4     5  |   5  
    7     AB_Improved    5  |   5     4  |   6     5  |   5     3  |   7  
--------------------------------------------------------------------------
           Win Rate:      62.9%        67.1%        62.9%        57.1%    
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       9  |   1     6  |   4     9  |   1    10  |   0  
    2       MM_Open      3  |   7     5  |   5     9  |   1     5  |   5  
    3      MM_Center     7  |   3     8  |   2     6  |   4     7  |   3  
    4     MM_Improved    8  |   2     5  |   5     7  |   3     4  |   6  
    5       AB_Open      7  |   3     5  |   5     3  |   7     6  |   4  
    6      AB_Center     6  |   4     7  |   3     6  |   4     4  |   6  
    7     AB_Improved    5  |   5     7  |   3     6  |   4     4  |   6  
--------------------------------------------------------------------------
           Win Rate:      64.3%        61.4%        65.7%        57.1%    
		   
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       8  |   2     7  |   3     7  |   3     7  |   3  
    2       MM_Open      9  |   1     7  |   3     5  |   5     4  |   6  
    3      MM_Center     8  |   2     9  |   1    10  |   0    10  |   0  
    4     MM_Improved    7  |   3     9  |   1     7  |   3     9  |   1  
    5       AB_Open      7  |   3     4  |   6     5  |   5     5  |   5  
    6      AB_Center     7  |   3     9  |   1     9  |   1     7  |   3  
    7     AB_Improved    6  |   4     4  |   6     5  |   5     6  |   4  
--------------------------------------------------------------------------
           Win Rate:      74.3%        70.0%        68.6%        68.6%    

                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       9  |   1     9  |   1     8  |   2     8  |   2  
    2       MM_Open      4  |   6     7  |   3     5  |   5     4  |   6  
    3      MM_Center     5  |   5     4  |   6     6  |   4     7  |   3  
    4     MM_Improved    8  |   2     6  |   4     3  |   7     7  |   3  
    5       AB_Open      6  |   4     5  |   5     4  |   6     4  |   6  
    6      AB_Center     5  |   5     7  |   3     7  |   3     5  |   5  
    7     AB_Improved    4  |   6     5  |   5     5  |   5     3  |   7  
--------------------------------------------------------------------------
           Win Rate:      58.6%        61.4%        54.3%        54.3%    
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       7  |   3     5  |   5     8  |   2     5  |   5  
    2       MM_Open      4  |   6     4  |   6     8  |   2     7  |   3  
    3      MM_Center     9  |   1     7  |   3     8  |   2     6  |   4  
    4     MM_Improved    4  |   6     5  |   5     3  |   7     6  |   4  
    5       AB_Open      5  |   5     4  |   6     4  |   6     5  |   5  
    6      AB_Center     6  |   4     4  |   6     4  |   6     6  |   4  
    7     AB_Improved    4  |   6     5  |   5     6  |   4     4  |   6  
--------------------------------------------------------------------------
           Win Rate:      55.7%        48.6%        58.6%        55.7%    
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       8  |   2    10  |   0     9  |   1    10  |   0  
    2       MM_Open      7  |   3     9  |   1     6  |   4     6  |   4  
    3      MM_Center     6  |   4     5  |   5     9  |   1     8  |   2  
    4     MM_Improved    5  |   5     5  |   5     6  |   4     5  |   5  
    5       AB_Open      5  |   5     6  |   4     5  |   5     3  |   7  
    6      AB_Center     5  |   5     6  |   4     6  |   4     7  |   3  
    7     AB_Improved    5  |   5     5  |   5     5  |   5     5  |   5  
--------------------------------------------------------------------------
           Win Rate:      58.6%        65.7%        65.7%        62.9%    
		   
                        *************************                         
                             Playing Matches                              
                        *************************                         

 Match #   Opponent    AB_Improved   AB_Custom   AB_Custom_2  AB_Custom_3 
                        Won | Lost   Won | Lost   Won | Lost   Won | Lost 
    1       Random       7  |   3     7  |   3    10  |   0    10  |   0  
    2       MM_Open     10  |   0     9  |   1     8  |   2     7  |   3  
    3      MM_Center    10  |   0     8  |   2     9  |   1    10  |   0  
    4     MM_Improved    8  |   2     9  |   1     8  |   2     3  |   7  
    5       AB_Open      6  |   4     3  |   7     7  |   3     7  |   3  
    6      AB_Center     3  |   7     3  |   7     7  |   3     8  |   2  
    7     AB_Improved    5  |   5     5  |   5     6  |   4     5  |   5  
--------------------------------------------------------------------------
           Win Rate:      70.0%        62.9%        78.6%        71.4%    
